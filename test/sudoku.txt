class Board
{
	var cells;

	func Board()
	{
		cells = 
		[0, 0, 0, 2, 0, 0, 0, 5, 0,
		 0, 4, 1, 0, 9, 0, 6, 0, 3,
		 0, 5, 0, 8, 6, 4, 0, 7, 0,
		 0, 0, 0, 6, 0, 0, 3, 1, 0,
		 0, 0, 7, 5, 8, 3, 2, 0, 0,
		 0, 3, 6, 0, 0, 7, 0, 0, 0,
		 0, 9, 0, 4, 1, 2, 0, 8, 0,
		 5, 0, 8, 0, 7, 0, 1, 9, 0,
		 0, 6, 0, 0, 0, 8, 0, 0, 0];
	}

	func dump()
	{
		for (var i in 0..9)
		{
			for (var j in 0..9)
			{
				print(cells[i * 9 + j]);
				if ((j + 1) % 3 == 0)
				{
					print(" | ");
				}
				else
				{
					print(" ");
				}
			}

			println();
			if ((i + 1) % 3 == 0)
			{
				println("------------------------");
			}
		}
	}

	func set(row, col, v)
	{
		cells[row * 9 + col] = v;
	}

	func get(row, col)
	{
		return cells[row * 9 + col];
	}

	func checkRow(row, val)
	{
		for (var i in 0..9)
		{
			if (cells[row * 9 + i] == val)
			{
				return false;
			}
		}
		return true;
	}

	func checkCol(col, val)
	{
		for (var i in 0..9)
		{
			if (cells[i * 9 + col] == val)
			{
				return false;
			}
		}
		return true;
	}

	func checkSquare(row, col, val)
	{
		var sRow = (row / 3) * 3;
		var sCol = (col / 3) * 3;
		
		for (var i in 0..3)
		{
			for (var j in 0..3)
			{
				var idx = (sRow + i) * 9 + j + sCol;
				#println(idx + ", " + cells[idx]);
				if (cells[idx] == val)
				{
					return false;
				}
			}
		}
		return true;
	}
}

func checkBoard(b, row, col, val)
{
	if (!b.checkRow(row, val))
	{
		return false;
	}
	if (!b.checkCol(col, val))
	{
		return false;
	}
	return b.checkSquare(row, col, val);
}

func solveBoard(b, cell)
{
	if (cell >= 81)
	{
		return true;
	}
	if (b.cells[cell] != 0)
	{
		return solveBoard(b, cell + 1);
	}

	for (var i in 1..10)
	{
		if (checkBoard(b, cell / 9, cell % 9, i))
		{
			b.cells[cell] = i;
			if (solveBoard(b, cell + 1))
			{
				return true;
			}
		}
	}
	b.cells[cell] = 0;
	return false;
}

var board = Board();
board.dump();
solveBoard(board, 0);
board.dump();